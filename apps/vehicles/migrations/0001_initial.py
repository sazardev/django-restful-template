# Generated by Django 4.2.7 on 2025-06-14 15:49

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de creación"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Fecha de actualización"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Activo")),
                (
                    "license_plate",
                    models.CharField(max_length=20, unique=True, verbose_name="Placa"),
                ),
                ("brand", models.CharField(max_length=50, verbose_name="Marca")),
                ("model", models.CharField(max_length=50, verbose_name="Modelo")),
                (
                    "year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2030),
                        ],
                        verbose_name="Año",
                    ),
                ),
                ("color", models.CharField(max_length=30, verbose_name="Color")),
                (
                    "vehicle_type",
                    models.CharField(
                        choices=[
                            ("truck", "Camión"),
                            ("van", "Furgoneta"),
                            ("motorcycle", "Motocicleta"),
                            ("car", "Automóvil"),
                            ("trailer", "Remolque"),
                            ("container", "Contenedor"),
                        ],
                        max_length=20,
                        verbose_name="Tipo de vehículo",
                    ),
                ),
                (
                    "vin_number",
                    models.CharField(
                        blank=True, max_length=17, null=True, verbose_name="Número VIN"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("available", "Disponible"),
                            ("in_use", "En uso"),
                            ("maintenance", "En mantenimiento"),
                            ("out_of_service", "Fuera de servicio"),
                            ("retired", "Retirado"),
                        ],
                        default="available",
                        max_length=20,
                        verbose_name="Estado",
                    ),
                ),
                (
                    "max_weight_kg",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Peso máximo (kg)",
                    ),
                ),
                (
                    "max_volume_m3",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Volumen máximo (m³)",
                    ),
                ),
                (
                    "fuel_type",
                    models.CharField(
                        choices=[
                            ("gasoline", "Gasolina"),
                            ("diesel", "Diésel"),
                            ("electric", "Eléctrico"),
                            ("hybrid", "Híbrido"),
                            ("cng", "Gas Natural Comprimido"),
                            ("lpg", "Gas Licuado de Petróleo"),
                        ],
                        max_length=20,
                        verbose_name="Tipo de combustible",
                    ),
                ),
                (
                    "fuel_capacity_liters",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                        verbose_name="Capacidad de combustible (L)",
                    ),
                ),
                (
                    "engine_power_hp",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Potencia del motor (HP)",
                    ),
                ),
                (
                    "transmission_type",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Tipo de transmisión"
                    ),
                ),
                (
                    "emissions_standard",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Estándar de emisiones"
                    ),
                ),
                (
                    "registration_expiry",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Vencimiento de registro"
                    ),
                ),
                (
                    "insurance_expiry",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Vencimiento de seguro"
                    ),
                ),
                (
                    "total_mileage_km",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                        verbose_name="Kilometraje total",
                    ),
                ),
                (
                    "last_maintenance_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Fecha último mantenimiento"
                    ),
                ),
                (
                    "current_driver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_vehicles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Conductor actual",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="owned_vehicles",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Propietario",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vehículo",
                "verbose_name_plural": "Vehículos",
                "db_table": "vehicles",
                "ordering": ["license_plate"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de creación"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Fecha de actualización"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Activo")),
                (
                    "maintenance_type",
                    models.CharField(
                        choices=[
                            ("preventive", "Preventivo"),
                            ("corrective", "Correctivo"),
                            ("inspection", "Inspección"),
                            ("oil_change", "Cambio de aceite"),
                            ("tire_change", "Cambio de llantas"),
                            ("brake_service", "Servicio de frenos"),
                            ("engine_service", "Servicio de motor"),
                            ("electrical", "Sistema eléctrico"),
                            ("cooling_system", "Sistema de refrigeración"),
                            ("transmission", "Transmisión"),
                            ("other", "Otro"),
                        ],
                        max_length=50,
                        verbose_name="Tipo de mantenimiento",
                    ),
                ),
                ("description", models.TextField(verbose_name="Descripción")),
                (
                    "cost",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                        verbose_name="Costo",
                    ),
                ),
                (
                    "performed_at",
                    models.DateTimeField(verbose_name="Fecha de realización"),
                ),
                (
                    "next_maintenance_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Próximo mantenimiento"
                    ),
                ),
                (
                    "mileage_km",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                        verbose_name="Kilometraje",
                    ),
                ),
                (
                    "performed_by",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Realizado por"
                    ),
                ),
                (
                    "workshop",
                    models.CharField(blank=True, max_length=100, verbose_name="Taller"),
                ),
                (
                    "notes",
                    models.TextField(blank=True, verbose_name="Notas adicionales"),
                ),
                (
                    "invoice_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="maintenance/invoices/",
                        verbose_name="Factura",
                    ),
                ),
                (
                    "receipt_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="maintenance/receipts/",
                        verbose_name="Recibo",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_records",
                        to="vehicles.vehicle",
                        verbose_name="Vehículo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro de mantenimiento",
                "verbose_name_plural": "Registros de mantenimiento",
                "db_table": "vehicle_maintenance_records",
                "ordering": ["-performed_at"],
            },
        ),
        migrations.CreateModel(
            name="VehicleLocation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de creación"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Fecha de actualización"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Activo")),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("-90.0")),
                            django.core.validators.MaxValueValidator(Decimal("90.0")),
                        ],
                        verbose_name="Latitud",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=11,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("-180.0")),
                            django.core.validators.MaxValueValidator(Decimal("180.0")),
                        ],
                        verbose_name="Longitud",
                    ),
                ),
                (
                    "accuracy_meters",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                        verbose_name="Precisión (metros)",
                    ),
                ),
                (
                    "altitude_meters",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="Altitud (metros)",
                    ),
                ),
                (
                    "speed_kmh",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0"))
                        ],
                        verbose_name="Velocidad (km/h)",
                    ),
                ),
                (
                    "heading_degrees",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("360")),
                        ],
                        verbose_name="Rumbo (grados)",
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="locations",
                        to="vehicles.vehicle",
                        verbose_name="Vehículo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ubicación de vehículo",
                "verbose_name_plural": "Ubicaciones de vehículos",
                "db_table": "vehicle_locations",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["vehicle", "-created_at"],
                        name="vehicle_loc_vehicle_944d6b_idx",
                    ),
                    models.Index(
                        fields=["latitude", "longitude"],
                        name="vehicle_loc_latitud_8662b6_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="VehicleDocument",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de creación"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Fecha de actualización"
                    ),
                ),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("registration", "Registro/Tarjeta de circulación"),
                            ("insurance", "Póliza de seguro"),
                            ("license", "Licencia de conducir"),
                            ("inspection", "Verificación/Inspección"),
                            ("permit", "Permiso especial"),
                            ("invoice", "Factura de compra"),
                            ("manual", "Manual del propietario"),
                            ("warranty", "Garantía"),
                            ("other", "Otro"),
                        ],
                        max_length=50,
                        verbose_name="Tipo de documento",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, verbose_name="Nombre del documento"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Descripción"),
                ),
                (
                    "file",
                    models.FileField(
                        upload_to="vehicles/documents/", verbose_name="Archivo"
                    ),
                ),
                (
                    "issue_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Fecha de emisión"
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Fecha de vencimiento"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Activo")),
                (
                    "vehicle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="vehicles.vehicle",
                        verbose_name="Vehículo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Documento de vehículo",
                "verbose_name_plural": "Documentos de vehículos",
                "db_table": "vehicle_documents",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["vehicle", "document_type"],
                        name="vehicle_doc_vehicle_746dfa_idx",
                    ),
                    models.Index(
                        fields=["expiry_date"], name="vehicle_doc_expiry__d07ca2_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(
                fields=["license_plate"], name="vehicles_license_b08e3c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(fields=["status"], name="vehicles_status_e44f2b_idx"),
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(
                fields=["vehicle_type"], name="vehicles_vehicle_d54349_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(fields=["owner"], name="vehicles_owner_i_b73183_idx"),
        ),
        migrations.AddIndex(
            model_name="vehicle",
            index=models.Index(
                fields=["current_driver"], name="vehicles_current_09353d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerecord",
            index=models.Index(
                fields=["vehicle", "-performed_at"],
                name="vehicle_mai_vehicle_65ec50_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerecord",
            index=models.Index(
                fields=["maintenance_type"], name="vehicle_mai_mainten_16c518_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerecord",
            index=models.Index(
                fields=["performed_at"], name="vehicle_mai_perform_3d4242_idx"
            ),
        ),
    ]
